package controllers

import (
	"fmt"
	"net/http"
	"encoding/json"
	"time"
	"order-system/config"
	"order-system/models"
	"order-system/utils"
	"github.com/gin-gonic/gin"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

func CreateOrder(c *gin.Context) {
	userID := c.GetInt("user_id")
	fmt.Println("‚úÖ userID:", userID)

	var request struct {
		Items []struct {
			ProductID uint `json:"product_id"`
			Quantity  int  `json:"quantity"`
		} `json:"items"`
	}

	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
		return
	}

	var orderItems []models.OrderItem
	var total float64

	for _, item := range request.Items {
		var product models.Product
		if err := config.DB.First(&product, item.ProductID).Error; err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": fmt.Sprintf("S·∫£n ph·∫©m ID %d kh√¥ng t·ªìn t·∫°i", item.ProductID)})
			return
		}

		unitPrice := product.Price
		totalPrice := product.Price * float64(item.Quantity)

		orderItems = append(orderItems, models.OrderItem{
			ProductID:  product.ID,
			Quantity:   item.Quantity,
			UnitPrice:  unitPrice,
			TotalPrice: totalPrice,
		})

		total += totalPrice
	}

	order := models.Order{
	UserID:        uint(userID),
	Items:         orderItems,
	TotalPrice:    total,
	Status:        "pending",         // n·∫øu b·∫°n c√≥ x·ª≠ l√Ω tr·∫°ng th√°i ƒë∆°n
	PaymentStatus: "unpaid",          // ‚úÖ th√™m d√≤ng n√†y
	}


	if err := config.DB.Create(&order).Error; err != nil {
	fmt.Println("‚ùå DB error:", err)
	c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng"})
	return
	}
	// üîî G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
var user struct {
	Email string
	Name  string
}

if err := config.DB.Model(&models.User{}).
	Select("email", "name").
	Where("id = ?", userID).
	Scan(&user).Error; err != nil {
	fmt.Println("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ g·ª≠i mail:", err)
}


	// G·ª≠i mail
	_ = utils.SendOrderConfirmationEmail(user.Email, user.Name, order.ID, order.TotalPrice)

	// üîÅ Cache ƒë∆°n h√†ng v√†o Redis
	orderJSON, _ := json.Marshal(order)
	key := fmt.Sprintf("last_order_user_%d", userID)
	config.RedisClient.Set(config.Ctx, key, orderJSON, 10*time.Minute)

	// üêá G·ª≠i ƒë∆°n h√†ng v√†o h√†ng ƒë·ª£i RabbitMQ ƒë·ªÉ x·ª≠ l√Ω sau 5 ph√∫t
message := fmt.Sprintf("%d", order.ID)
err := config.MQChannel.Publish(
	"",                   // default exchange
	config.QueueName,     // queue name
	false, false,
	amqp091.Publishing{
		ContentType: "text/plain",
		Body:        []byte(message),
	},
)
if err != nil {
	fmt.Println("‚ùå L·ªói khi g·ª≠i ƒë∆°n v√†o RabbitMQ:", err)
}

	
	c.JSON(http.StatusCreated, order)
	
}

func GetMyOrders(c *gin.Context) {
	userID := c.GetInt("user_id")

	var orders []models.Order
	err := config.DB.Preload("Items.Product").Where("user_id = ?", userID).Find(&orders).Error
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y ƒë∆°n h√†ng"})
		return
	}

		
	c.JSON(http.StatusOK, orders)
}

func GetAllOrders(c *gin.Context) {
	role := c.GetString("role")
	if role != "admin" {
		c.JSON(http.StatusForbidden, gin.H{"error": "Ch·ªâ admin ƒë∆∞·ª£c ph√©p xem t·∫•t c·∫£ ƒë∆°n h√†ng"})
		return
	}

	var orders []models.Order
	if err := config.DB.Preload("User").Preload("Items.Product").Find(&orders).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng"})
		return
	}

	c.JSON(http.StatusOK, orders)
}

func GetOrderByID(c *gin.Context) {
	orderID := c.Param("id")
	userID := c.GetInt("user_id")
	role := c.GetString("role")

	var order models.Order
	if err := config.DB.Preload("User").Preload("Items.Product").First(&order, orderID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"})
		return
	}

	// Ch·ªâ cho ph√©p admin ho·∫∑c ch√≠nh user xem ƒë∆°n c·ªßa m√¨nh
	if role != "admin" && int(order.UserID) != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y"})
		return
	}

	c.JSON(http.StatusOK, order)
}

func GetLastOrderFromCache(c *gin.Context) {
	userID := c.GetInt("user_id")
	key := fmt.Sprintf("last_order_user_%d", userID)

	data, err := config.RedisClient.Get(config.Ctx, key).Result()
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong cache"})
		return
	}

	var order models.Order
	if err := json.Unmarshal([]byte(data), &order); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "L·ªói khi parse d·ªØ li·ªáu Redis"})
		return
	}

	c.JSON(http.StatusOK, order)
}

func MarkOrderPaid(c *gin.Context) {
	orderID := c.Param("id")

	var order models.Order
	if err := config.DB.First(&order, orderID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"})
		return
	}

	order.PaymentStatus = "paid"

	if err := config.DB.Save(&order).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "ƒê√£ thanh to√°n th√†nh c√¥ng"})
}

func MarkOrderProcessed(c *gin.Context) {
	orderID := c.Param("id")

	var order models.Order
	if err := config.DB.First(&order, orderID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"})
		return
	}

	if order.Status == "processed" {
		c.JSON(http.StatusBadRequest, gin.H{"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥"})
		return
	}

	order.Status = "processed"

	if err := config.DB.Save(&order).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω"})
}

